// Code generated by protoc-gen-go.
// source: github.com/micro/go-platform/monitor/proto/monitor.proto
// DO NOT EDIT!

/*
Package monitor is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/go-platform/monitor/proto/monitor.proto

It has these top-level messages:
	Service
	Node
	HealthCheck
	Status
	Stats
*/
package monitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type HealthCheck_Status int32

const (
	HealthCheck_UNKNOWN HealthCheck_Status = 0
	HealthCheck_OK      HealthCheck_Status = 1
	HealthCheck_ERROR   HealthCheck_Status = 2
)

var HealthCheck_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "ERROR",
}
var HealthCheck_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"ERROR":   2,
}

func (x HealthCheck_Status) String() string {
	return proto.EnumName(HealthCheck_Status_name, int32(x))
}
func (HealthCheck_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Status_Status int32

const (
	Status_UNKNOWN Status_Status = 0
	Status_STARTED Status_Status = 1
	Status_RUNNING Status_Status = 2
	Status_STOPPED Status_Status = 3
)

var Status_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "STARTED",
	2: "RUNNING",
	3: "STOPPED",
}
var Status_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"STARTED": 1,
	"RUNNING": 2,
	"STOPPED": 3,
}

func (x Status_Status) String() string {
	return proto.EnumName(Status_Status_name, int32(x))
}
func (Status_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Service struct {
	Name    string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string  `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Nodes   []*Node `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Node struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HealthCheck struct {
	Id          string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Timestamp   int64              `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Interval    int64              `protobuf:"varint,4,opt,name=interval" json:"interval,omitempty"`
	Ttl         int64              `protobuf:"varint,5,opt,name=ttl" json:"ttl,omitempty"`
	Service     *Service           `protobuf:"bytes,6,opt,name=service" json:"service,omitempty"`
	Status      HealthCheck_Status `protobuf:"varint,7,opt,name=status,enum=HealthCheck_Status" json:"status,omitempty"`
	Results     map[string]string  `protobuf:"bytes,8,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error       string             `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HealthCheck) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *HealthCheck) GetResults() map[string]string {
	if m != nil {
		return m.Results
	}
	return nil
}

type Status struct {
	Service   *Service      `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Status    Status_Status `protobuf:"varint,2,opt,name=status,enum=Status_Status" json:"status,omitempty"`
	Info      string        `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	Timestamp int64         `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Interval  int64         `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	Ttl       int64         `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Status) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type Stats struct {
	Service   *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Timestamp int64    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Interval  int64    `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
	Ttl       int64    `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Stats) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "Service")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*HealthCheck)(nil), "HealthCheck")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*Stats)(nil), "Stats")
	proto.RegisterEnum("HealthCheck_Status", HealthCheck_Status_name, HealthCheck_Status_value)
	proto.RegisterEnum("Status_Status", Status_Status_name, Status_Status_value)
}

var fileDescriptor0 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0x94, 0x40,
	0x14, 0xc7, 0x65, 0x58, 0x60, 0xf7, 0x51, 0x2b, 0x4e, 0x3d, 0x4c, 0x3d, 0x98, 0x06, 0x2f, 0x1b,
	0x13, 0xd9, 0x64, 0xbd, 0x34, 0xc6, 0x98, 0x18, 0xdd, 0xa8, 0x69, 0x02, 0x0d, 0xbb, 0x8d, 0x67,
	0x4a, 0xa7, 0xdd, 0x49, 0x81, 0x21, 0xc3, 0xd0, 0xa4, 0x1f, 0xcc, 0x0f, 0xe0, 0x37, 0xf3, 0x31,
	0xec, 0x56, 0xb6, 0x6b, 0x7a, 0x22, 0xef, 0xfd, 0x67, 0x1e, 0xbf, 0xdf, 0x03, 0x38, 0xbd, 0x11,
	0x7a, 0xdd, 0x5e, 0x46, 0xb9, 0x2c, 0x67, 0xa5, 0xc8, 0x95, 0x9c, 0xdd, 0xc8, 0xf7, 0x75, 0x91,
	0xe9, 0x6b, 0xa9, 0xb0, 0x23, 0x2b, 0xa1, 0xa5, 0x9a, 0xd5, 0x4a, 0x6a, 0xb9, 0xad, 0x22, 0x53,
	0x85, 0x9f, 0xc1, 0x5b, 0x72, 0x75, 0x27, 0x72, 0x4e, 0x0f, 0x60, 0x54, 0x65, 0x25, 0x67, 0xd6,
	0x89, 0x35, 0x9d, 0xd0, 0x17, 0xe0, 0xdd, 0x71, 0xd5, 0x08, 0x59, 0x31, 0x62, 0x1a, 0xaf, 0xc0,
	0xa9, 0xe4, 0x15, 0x6f, 0x98, 0x7d, 0x62, 0x4f, 0xfd, 0xb9, 0x13, 0xc5, 0x58, 0x85, 0x14, 0x46,
	0xdd, 0x93, 0x02, 0x10, 0x71, 0xd5, 0x5f, 0x0d, 0x7f, 0x13, 0xf0, 0x7f, 0xf0, 0xac, 0xd0, 0xeb,
	0xaf, 0x6b, 0x9e, 0xdf, 0x0e, 0x33, 0x7a, 0x04, 0x3e, 0xce, 0xc8, 0x95, 0xa8, 0xf5, 0xbf, 0xd1,
	0x2f, 0x61, 0xa2, 0x45, 0xc9, 0x1b, 0x9d, 0x95, 0x35, 0x8e, 0xb7, 0xa6, 0x36, 0x0d, 0x60, 0x2c,
	0x2a, 0x8d, 0x64, 0x59, 0xc1, 0x46, 0xa6, 0xe3, 0x83, 0xad, 0x75, 0xc1, 0x1c, 0x53, 0x1c, 0x83,
	0xd7, 0xf4, 0xd8, 0xcc, 0xc5, 0x86, 0x3f, 0x1f, 0x47, 0x5b, 0x8d, 0xb7, 0xe0, 0xe2, 0x20, 0xdd,
	0x36, 0xcc, 0xc3, 0xe4, 0x70, 0x7e, 0x14, 0x0d, 0x58, 0xa2, 0xa5, 0x89, 0xe8, 0x3b, 0xf0, 0x14,
	0x6f, 0xda, 0x42, 0x37, 0x6c, 0x6c, 0x74, 0x8e, 0x77, 0x4e, 0xa5, 0x7d, 0xb6, 0xa8, 0xb4, 0xba,
	0xa7, 0xcf, 0xc1, 0xe1, 0x4a, 0x49, 0xc5, 0x26, 0x1d, 0xec, 0xeb, 0x08, 0x0e, 0x76, 0x62, 0xe4,
	0xba, 0xe5, 0xf7, 0x1b, 0x3d, 0x3c, 0x8b, 0xc4, 0x2d, 0xef, 0xc5, 0x3e, 0x92, 0x53, 0x2b, 0x9c,
	0x82, 0xbb, 0x79, 0xa9, 0x0f, 0xde, 0x45, 0x7c, 0x16, 0x27, 0xbf, 0xe2, 0xe0, 0x19, 0x75, 0x81,
	0x24, 0x67, 0x81, 0x45, 0x27, 0xe0, 0x2c, 0xd2, 0x34, 0x49, 0x03, 0x12, 0xfe, 0xb1, 0x1e, 0x8e,
	0x0e, 0xfc, 0xac, 0x47, 0x7e, 0x6f, 0x1e, 0xfc, 0x88, 0xf1, 0x3b, 0xdc, 0x38, 0x6d, 0xd5, 0xf0,
	0x33, 0x8a, 0xea, 0x5a, 0x9a, 0x3d, 0x3e, 0x5a, 0xed, 0x68, 0x6f, 0xb5, 0xce, 0x70, 0xb5, 0xdd,
	0x26, 0xed, 0xf0, 0xd3, 0xff, 0x79, 0xb1, 0x58, 0xae, 0xbe, 0xa4, 0xab, 0xc5, 0x37, 0x84, 0xc6,
	0x22, 0xbd, 0x88, 0xe3, 0x9f, 0xf1, 0xf7, 0x80, 0xf4, 0x49, 0x72, 0x7e, 0x8e, 0x89, 0x1d, 0xae,
	0xc0, 0xe9, 0x6e, 0x3f, 0x69, 0xb0, 0xc3, 0x44, 0xf6, 0x98, 0xec, 0x21, 0x93, 0x41, 0xbe, 0x74,
	0xcd, 0xcf, 0xfa, 0xe1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x62, 0x43, 0xe0, 0xe8, 0x02,
	0x00, 0x00,
}
