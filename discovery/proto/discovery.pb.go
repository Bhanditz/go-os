// Code generated by protoc-gen-go.
// source: micro/go-platform/discovery/proto/discovery.proto
// DO NOT EDIT!

/*
Package discovery is a generated protocol buffer package.

It is generated from these files:
	micro/go-platform/discovery/proto/discovery.proto

It has these top-level messages:
	Heartbeat
	Service
	Result
	Node
	Endpoint
	Value
*/
package discovery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Heartbeat struct {
	Id        string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Service   *Service `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Interval  int64    `protobuf:"varint,4,opt,name=interval" json:"interval,omitempty"`
	Ttl       int64    `protobuf:"varint,5,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Heartbeat) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type Service struct {
	Name      string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version   string            `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Endpoints []*Endpoint       `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
	Nodes     []*Node           `protobuf:"bytes,5,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Service) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Service) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Service) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Result struct {
	Action    string   `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Service   *Service `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type Node struct {
	Id       string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address  string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Port     int64             `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Node) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Endpoint struct {
	Name     string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Request  *Value            `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Response *Value            `protobuf:"bytes,3,opt,name=response" json:"response,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Endpoint) GetRequest() *Value {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Endpoint) GetResponse() *Value {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Endpoint) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Value struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type   string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Values []*Value `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Value) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Heartbeat)(nil), "Heartbeat")
	proto.RegisterType((*Service)(nil), "Service")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*Endpoint)(nil), "Endpoint")
	proto.RegisterType((*Value)(nil), "Value")
}

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xbd, 0x6e, 0xdb, 0x30,
	0x14, 0x85, 0x21, 0xcb, 0xfa, 0xbb, 0xae, 0xfb, 0xc3, 0x16, 0xb6, 0x5a, 0x74, 0x28, 0x04, 0x14,
	0x70, 0x87, 0x4a, 0x68, 0xbb, 0x14, 0xed, 0xec, 0xa2, 0x4b, 0x3b, 0x24, 0x40, 0x76, 0x5a, 0x64,
	0x02, 0x21, 0x92, 0xa8, 0x90, 0xd7, 0x06, 0xf4, 0x08, 0x79, 0x92, 0x3c, 0x42, 0x5e, 0x2f, 0x57,
	0x12, 0x6d, 0x47, 0xc8, 0x94, 0x64, 0x3c, 0xbc, 0x24, 0xcf, 0x77, 0x0e, 0x09, 0xdf, 0xaa, 0x22,
	0xd7, 0x2a, 0xbb, 0x50, 0x5f, 0x9b, 0x92, 0xe3, 0xb9, 0xd2, 0x55, 0x26, 0x0a, 0x93, 0xab, 0x9d,
	0xd4, 0x6d, 0xd6, 0x68, 0x85, 0xea, 0xa8, 0xd3, 0x5e, 0x27, 0x02, 0xa2, 0xbf, 0x92, 0x6b, 0xdc,
	0x48, 0x8e, 0x0c, 0x60, 0x52, 0x88, 0xd8, 0xf9, 0xe4, 0xac, 0x22, 0xf6, 0x1e, 0x02, 0x23, 0xf5,
	0xae, 0xc8, 0x65, 0x3c, 0xa1, 0x85, 0xd9, 0xf7, 0x30, 0x3d, 0x1d, 0x34, 0x7b, 0x03, 0x11, 0x16,
	0x95, 0x34, 0xc8, 0xab, 0x26, 0x76, 0x69, 0xe8, 0xb2, 0xd7, 0x10, 0x16, 0x35, 0xd2, 0x9c, 0x97,
	0xf1, 0xb4, 0x5f, 0x99, 0x81, 0x8b, 0x58, 0xc6, 0x5e, 0x27, 0x92, 0x5b, 0x07, 0x82, 0xfd, 0xe9,
	0x17, 0x30, 0xad, 0x79, 0x25, 0xad, 0xcd, 0x2b, 0x08, 0x88, 0xc6, 0x14, 0xaa, 0xee, 0x6d, 0x22,
	0xb6, 0x82, 0xb0, 0x92, 0xc8, 0x05, 0x47, 0x4e, 0x77, 0xbb, 0x64, 0xbc, 0xd8, 0x1b, 0xa7, 0xff,
	0xec, 0x60, 0x5d, 0xa3, 0x6e, 0xd9, 0x47, 0x88, 0x64, 0x2d, 0x1a, 0x45, 0xc6, 0x86, 0x4c, 0xbb,
	0xad, 0x51, 0xba, 0xb6, 0x2b, 0xec, 0x1d, 0x78, 0xb5, 0x12, 0xd2, 0x10, 0x41, 0x37, 0xf1, 0xd2,
	0xff, 0xa4, 0x3e, 0x64, 0x30, 0x1f, 0x5f, 0x42, 0x98, 0x97, 0xb2, 0xb5, 0x30, 0x73, 0xf0, 0x28,
	0xc0, 0x76, 0x48, 0x1c, 0xfd, 0x9a, 0xfc, 0x74, 0x92, 0x3f, 0xe0, 0x9f, 0x48, 0xb3, 0x2d, 0x91,
	0xbd, 0x04, 0x9f, 0xe7, 0xd8, 0x81, 0x3e, 0xa1, 0xa0, 0xe4, 0xda, 0x81, 0x69, 0x47, 0x30, 0xea,
	0x98, 0xc2, 0x73, 0x21, 0xb4, 0x34, 0xc6, 0x86, 0xa7, 0x6e, 0x1a, 0xa5, 0xd1, 0x96, 0xfa, 0xf9,
	0x5e, 0x15, 0x43, 0xbe, 0xb7, 0x7d, 0x8a, 0x71, 0x0f, 0x8f, 0xcf, 0x74, 0xe3, 0x40, 0x78, 0xe8,
	0x69, 0xfc, 0x1c, 0x4b, 0x08, 0xb4, 0xbc, 0xda, 0x12, 0xba, 0x0d, 0xe5, 0xa7, 0x67, 0xdd, 0x69,
	0x16, 0x43, 0x48, 0x9c, 0x8d, 0xaa, 0x8d, 0xec, 0xe9, 0x8e, 0x93, 0x2f, 0x0f, 0x28, 0x97, 0x87,
	0x57, 0x78, 0x2e, 0xe9, 0x6f, 0xf0, 0x06, 0x93, 0x31, 0x25, 0x29, 0x6c, 0x1b, 0xbb, 0x91, 0x2d,
	0xc0, 0xef, 0xcf, 0x19, 0xfb, 0x5f, 0x2c, 0xd8, 0xc6, 0xef, 0x7f, 0xf8, 0x8f, 0xbb, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x26, 0x2e, 0x13, 0x30, 0x16, 0x03, 0x00, 0x00,
}
